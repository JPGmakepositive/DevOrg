@RestResource(urlMapping='/stripe/*')

Global class StripePost {    
   
   Global StripePost()
   { 
       handlePost();      
   }
    @HttpPost
    Global Static String handlePost(){ 
    Integer created;
	Boolean livemode;
	String id;
	String type_Z; // in json: type
	object object_Z1; // in json: object
	Object request;
	Integer pending_webhooks;
	String api_version;
	Data data;
        
        RestRequest req = RestContext.request;
        Blob body = req.requestBody;
        String bodyString = body.toString();
        JSONParser parser = JSON.createParser(bodyString);
       		while (parser.nextToken() != JSONToken.END_OBJECT) {
			if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
				String text = parser.getText();
				if (parser.nextToken() != JSONToken.VALUE_NULL) {
					if (text == 'created') {
						created = parser.getIntegerValue();
					} else if (text == 'livemode') {
						livemode = parser.getBooleanValue();
					} else if (text == 'id') {
						id = parser.getText();
					} else if (text == 'type') {
						type_Z = parser.getText();
					} else if (text == 'object') {
						return String.valueOf(parser.getCurrentToken());
                        
					} else if (text == 'request') {
						request = parser.getText();
					} else if (text == 'pending_webhooks') {
						pending_webhooks = parser.getIntegerValue();
					} else if (text == 'api_version') {
						api_version = parser.getText();
					} else if (text == 'data') {
						data = new Data(parser);
					} else {
						System.debug(LoggingLevel.WARN, 'Root consuming unrecognized property: '+text);
						consumeObject(parser);
					}
				}
			}
		}
        
       	system.debug('====='+bodyString); 
   		
       
		return string.valueOf(object_Z1); 
	           
 
    } 
    


// Generated by JSON2Apex http://json2apex.herokuapp.com/
//
// The supplied json has fields with names that are reserved words in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.

	Global static void consumeObject(JSONParser parser) {
		Integer depth = 0;
		do {
			JSONToken curr = parser.getCurrentToken();
			if (curr == JSONToken.START_OBJECT || 
				curr == JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == JSONToken.END_OBJECT ||
				curr == JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}

	
	Global class Object_Z {
		Global String id {get;set;} 
		Global String object_Z {get;set;} // in json: object
		Global Integer amount {get;set;} 
		Global Integer amount_refunded {get;set;} 
		Global Object application_fee {get;set;} 
		Global String balance_transaction {get;set;} 
		Global Boolean captured {get;set;} 
		Global Integer created {get;set;} 
		Global String currency1 {get;set;} 
		Global Object customer {get;set;} 
		Global String description {get;set;} 
		Global Object destination {get;set;} 
		Global Object dispute {get;set;} 
		Global Object failure_code {get;set;} 
		Global Object failure_message {get;set;} 
		Global Fraud_details fraud_details {get;set;} 
		Global Object invoice {get;set;} 
		Global Boolean livemode {get;set;} 
		Global Fraud_details metadata {get;set;} 
		Global Object order {get;set;} 
		Global Boolean paid {get;set;} 
		Global Object receipt_email {get;set;} 
		Global Object receipt_number {get;set;} 
		Global Boolean refunded {get;set;} 
		Global Refunds refunds {get;set;} 
		Global Object shipping {get;set;} 
		Global Source source {get;set;} 
		Global Object source_transfer {get;set;} 
		Global Object statement_descriptor {get;set;} 
		Global String status {get;set;} 

		Global Object_Z(JSONParser parser) {
			while (parser.nextToken() != JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != JSONToken.VALUE_NULL) {
						if (text == 'id') {
							id = parser.getText();
						} else if (text == 'object') {
							object_Z = parser.getText();
						} else if (text == 'amount') {
							amount = parser.getIntegerValue();
						} else if (text == 'amount_refunded') {
							amount_refunded = parser.getIntegerValue();
						} else if (text == 'application_fee') {
							application_fee = parser.getText();
						} else if (text == 'balance_transaction') {
							balance_transaction = parser.getText();
						} else if (text == 'captured') {
							captured = parser.getBooleanValue();
						} else if (text == 'created') {
							created = parser.getIntegerValue();
						} else if (text == 'currency') {
							currency1 = parser.getText();
						} else if (text == 'customer') {
							customer = parser.getText();
						} else if (text == 'description') {
							description = parser.getText();
						} else if (text == 'destination') {
							destination = parser.getText();
						} else if (text == 'dispute') {
							dispute = parser.getText();
						} else if (text == 'failure_code') {
							failure_code = parser.getText();
						} else if (text == 'failure_message') {
							failure_message = parser.getText();
						} else if (text == 'fraud_details') {
							fraud_details = new Fraud_details(parser);
						} else if (text == 'invoice') {
							invoice = parser.getText();
						} else if (text == 'livemode') {
							livemode = parser.getBooleanValue();
						} else if (text == 'metadata') {
							metadata = new Fraud_details(parser);
						} else if (text == 'order') {
							order = parser.getText();
						} else if (text == 'paid') {
							paid = parser.getBooleanValue();
						} else if (text == 'receipt_email') {
							receipt_email = parser.getText();
						} else if (text == 'receipt_number') {
							receipt_number = parser.getText();
						} else if (text == 'refunded') {
							refunded = parser.getBooleanValue();
						} else if (text == 'refunds') {
							refunds = new Refunds(parser);
						} else if (text == 'shipping') {
							shipping =  parser.getText();
						} else if (text == 'source') {
							source = new Source(parser);
						} else if (text == 'source_transfer') {
							source_transfer = parser.getText();
						} else if (text == 'statement_descriptor') {
							statement_descriptor = parser.getText();
						} else if (text == 'status') {
							status = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Object_Z consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	Global class Refunds {
		Global String object_Z {get;set;} // in json: object
		Global List<Fraud_details> data {get;set;} 
		Global Boolean has_more {get;set;} 
		Global Integer total_count {get;set;} 
		Global String url {get;set;} 

		Global Refunds(JSONParser parser) {
			while (parser.nextToken() != JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != JSONToken.VALUE_NULL) {
						if (text == 'object') {
							object_Z = parser.getText();
						} else if (text == 'data') {
							data = new List<Fraud_details>();
							while (parser.nextToken() != JSONToken.END_ARRAY) {
								data.add(new Fraud_details(parser));
							}
						} else if (text == 'has_more') {
							has_more = parser.getBooleanValue();
						} else if (text == 'total_count') {
							total_count = parser.getIntegerValue();
						} else if (text == 'url') {
							url = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Refunds consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	Global class Data {
		Global Object_Z object_Z {get;set;} // in json: object

		Global Data(JSONParser parser) {
			while (parser.nextToken() != JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != JSONToken.VALUE_NULL) {
						if (text == 'object') {
							object_Z = new Object_Z(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Data consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	Global class Fraud_details {

		Global Fraud_details(JSONParser parser) {
			while (parser.nextToken() != JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != JSONToken.VALUE_NULL) {
						{
							System.debug(LoggingLevel.WARN, 'Fraud_details consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	Global class Source {
		Global String id {get;set;} 
		Global String object_Z {get;set;} // in json: object
		Global Object address_city {get;set;} 
		Global Object address_country {get;set;} 
		Global Object address_line1 {get;set;} 
		Global Object address_line1_check {get;set;} 
		Global Object address_line2 {get;set;} 
		Global Object address_state {get;set;} 
		Global Object address_zip {get;set;} 
		Global Object address_zip_check {get;set;} 
		Global String brand {get;set;} 
		Global String country {get;set;} 
		Global Object customer {get;set;} 
		Global String cvc_check {get;set;} 
		Global Object dynamic_last4 {get;set;} 
		Global Integer exp_month {get;set;} 
		Global Integer exp_year {get;set;} 
		Global String funding {get;set;} 
		Global String last4 {get;set;} 
		Global Fraud_details metadata {get;set;} 
		Global Object name {get;set;} 
		Global Object tokenization_method {get;set;} 

		Global Source(JSONParser parser) {
			while (parser.nextToken() != JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != JSONToken.VALUE_NULL) {
						if (text == 'id') {
							id = parser.getText();
						} else if (text == 'object') {
							object_Z = parser.getText();
						} else if (text == 'address_city') {
							address_city = parser.getText();
						} else if (text == 'address_country') {
							address_country = parser.getText();
						} else if (text == 'address_line1') {
							address_line1 = parser.getText();
						} else if (text == 'address_line1_check') {
							address_line1_check = parser.getText();
						} else if (text == 'address_line2') {
							address_line2 = parser.getText();
						} else if (text == 'address_state') {
							address_state = parser.getText();
						} else if (text == 'address_zip') {
							address_zip = parser.getText();
						} else if (text == 'address_zip_check') {
							address_zip_check = parser.getText();
						} else if (text == 'brand') {
							brand = parser.getText();
						} else if (text == 'country') {
							country = parser.getText();
						} else if (text == 'customer') {
							customer = parser.getText();
						} else if (text == 'cvc_check') {
							cvc_check = parser.getText();
						} else if (text == 'dynamic_last4') {
							dynamic_last4 = parser.getText();
						} else if (text == 'exp_month') {
							exp_month = parser.getIntegerValue();
						} else if (text == 'exp_year') {
							exp_year = parser.getIntegerValue();
						} else if (text == 'funding') {
							funding = parser.getText();
						} else if (text == 'last4') {
							last4 = parser.getText();
						} else if (text == 'metadata') {
							metadata = new Fraud_details(parser);
						} else if (text == 'name') {
							name = parser.getText();
						} else if (text == 'tokenization_method') {
							tokenization_method = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Source consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	
	Global static JSON2Apex parse(String json) {
		return new JSON2Apex(System.JSON.createParser(json));
	}

}